name: Deploy Project to App Engine

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  test:
    name: Test and Sonarqube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Test and analyze
        run: ./gradlew test jacocoTestReport sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          API_KEY: ${{ secrets.API_KEY }}

  deploy:
    name: Deploying to Google Cloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare app.yaml MONGODB_PASSWORD
        run: sed -i "s/MONGO_PLACEHOLDER/${{ secrets.MONGODB_PASSWORD }}/g" app.yaml

      - name: Prepare app.yaml API_KEY
        run: sed -i "s/API_PLACEHOLDER/${{ secrets.API_KEY }}/g" app.yaml

      - name: Deploy to App Engine
        id: deploy
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: app.yaml
          credentials: ${{ secrets.GCP_SERVICE_CREDENTIALS }}
          
      - name: Stop previous versions
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_CREDENTIALS }}

      - name: Disable older versions
        run: |
          PROJECT_ID=$(echo '${{ secrets.GCP_SERVICE_CREDENTIALS }}' | jq -r '.project_id')
          CURRENT_VERSION="v2"
          CURRENT_SERVICE="default"

          echo "Fetching deployed versions..."
          VERSIONS=$(curl -s -X GET \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            "https://appengine.googleapis.com/v1/apps/$PROJECT_ID/services/$CURRENT_SERVICE/versions")

          echo "$VERSIONS" | jq -c '.versions[] | select(.id != "'$CURRENT_VERSION'")' | while read version; do
            VERSION_ID=$(echo "$version" | jq -r '.id')
            echo "Stopping version: $VERSION_ID"
            curl -s -X PATCH \
              -H "Authorization: Bearer $(gcloud auth print-access-token)" \
              -H "Content-Type: application/json" \
              -d '{"servingStatus":"STOPPED"}' \
              "https://appengine.googleapis.com/v1/apps/$PROJECT_ID/services/$CURRENT_SERVICE/versions/$VERSION_ID"
          done          


      - name: Test
        run: curl "${{ steps.deploy.outputs.url }}"
